<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- scan hibernateDao -->
	<context:component-scan base-package="cn.tata.t2s.ssm.dao.impl" />
	<!-- property file -->
	<context:property-placeholder location="classpath:jdbc.properties"
		ignore-unresolvable="true" />

	<!-- dataSource druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.pool.size.init}" />
		<property name="minIdle" value="${druid.pool.size.min}" />
		<property name="maxActive" value="${druid.pool.size.max}" />

		<!-- 配置监控统计拦截的filters，wall用于防止sql注入，stat用于统计分析 -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>

	<!-- multi sql -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="config" ref="wall-config" />
	</bean>

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter" />

	<bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">
		<property name="multiStatementAllow" value="true" />
	</bean>

	<!-- NamingStrategy -->
	<bean id="AcmeCorpPhysicalNamingStrategy" class="cn.tata.t2s.ssm.util.AcmeCorpPhysicalNamingStrategy" />

	<!-- hibernate EntityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="cn.tata.t2s.ssm.entity" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="persistenceUnitName" value="t2sPersistanceUnit" />
		<property name="persistenceXmlLocation" value="classpath:persistence.xml" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.physical_naming_strategy">cn.tata.t2s.ssm.util.AcmeCorpPhysicalNamingStrategy</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hiberante.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- JpaVendorAdapter -->
	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="generateDdl" value="true" />
		<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
	</bean>
	
	<!-- TransactionManager-->
    <bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    	<property name="entityManagerFactory" ref="entityManagerFactory"/>
    	<property name="persistenceUnitName" value="t2sPersistanceUnit" />
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="criteriaBuilder" class="org.hibernate.query.criteria.internal.CriteriaBuilderImpl">
	       <constructor-arg value="#{ entityManagerFactory.getNativeEntityManagerFactory() }"/>
<!-- 		<constructor-arg ref="#{ entityManagerFactory.unwrap( T(org.hibernate.Session).class ) }"/> -->
	</bean>
</beans>
